name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # create_cache:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: node:18-bullseye
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install dependencies
  #       run: yarn install

  #     - name: Cache dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           node_modules
  #           yarn.lock
  #           .yarn
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}

  # yarn_test:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: node:18-bullseye
  #   needs: create_cache
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install dependencies
  #       run: yarn install

  #     - name: Run tests
  #       run: yarn test

  #     - name: Cache dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           node_modules
  #           yarn.lock
  #           .yarn
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}

  # gitleaks:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: zricethezav/gitleaks
  #   needs: yarn_test
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Run gitleaks
  #       run: gitleaks detect --verbose --source . -f json -r gitleaks.json
  #       continue-on-error: true

  #     - name: Upload gitleaks report
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: gitleaks-report
  #         path: gitleaks.json

  # njsscan:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: python:3
  #   needs: yarn_test
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install njsscan
  #       run: pip install --upgrade njsscan

  #     - name: Run njsscan
  #       run: njsscan --exit-warning . --sarif -o njsscan.sarif
  #       continue-on-error: true

  #     - name: Upload njsscan report
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: njsscan-report
  #         path: njsscan.sarif

  # semgrep:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: returntocorp/semgrep
  #   needs: yarn_test
  #   env:
  #     SEMGREP_RULES: p/javascript
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Run semgrep
  #       run: semgrep ci --json --output semgrep.json
  #       continue-on-error: true

  #     - name: Upload semgrep report
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: semgrep-report
  #         path: semgrep.json

  # retire:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: node:18-bullseye
  #   needs: yarn_test
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install Retire.js
  #       run: npm install -g retire

  #     - name: Run Retire.js
  #       run: retire --path . --outputformat json --outputpath retire.json
  #       continue-on-error: true

  #     - name: Upload retire report
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: retire-report
  #         path: retire.json

  # upload_reports:
  #   runs-on: ubuntu-latest
  #   needs: ["gitleaks", "njsscan", "semgrep", "retire"]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Download gitleaks report
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: gitleaks-report
  
  #     - name: Download njsscan report
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: njsscan-report
  
  #     - name: Download semgrep report
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: semgrep-report

  #     - name: Download retire report
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: retire-report

  #     - name: Install requests
  #       run: pip3 install requests

  #     - name: Upload gitleaks report
  #       run: python3 upload-reports.py gitleaks.json

  #     - name: Upload njsscan report
  #       run: python3 upload-reports.py njsscan.sarif

  #     - name: Upload semgrep report
  #       run: python3 upload-reports.py semgrep.json

  #     - name: Upload retire report
  #       run: python3 upload-reports.py retire.json

  build_image:
    runs-on: ubuntu-latest
    # needs: yarn_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      # - name: Build and push Docker image
      #   run: |
      #     docker build -t $IMAGE_NAME:$GITHUB_SHA -t $IMAGE_NAME:latest .
      #     docker push $IMAGE_NAME:$GITHUB_SHA
      #     docker push $IMAGE_NAME:latest
      #   env:
      #     IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/juice-shop
      #     SERVER_IP: 13.51.163.213
      #     SERVER_USER: ubuntu
      
  deploy_image:
    runs-on: ubuntu-latest
    needs: build_image
    steps:
      # - name: Install SSH client
      #   run: |
      #     apt update -y && apt install -y openssh-client

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "docker pull $IMAGE_NAME:latest"
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "docker stop juice-shop || true && docker rm juice-shop || true"
          ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "docker run -d --name juice-shop -p 3000:3000 $IMAGE_NAME:latest"
        env:
          SERVER_IP: 13.51.163.213
          SERVER_USER: ubuntu
          IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/juice-shop
        